library(ggcleveland)
fusion
pkgdown:::build_site_external()
pkgdown:::build_site_external()
pkgdown:::build_site_external()
pkgdown:::build_site_external()
pkgdown:::build_site_external()
pkgdown:::build_site_external()
rubber
galaxy
gg_pt(fusion, time, nv.vv, taus = c(-0.5, -0.25, 0, 0.25, 0.5))
#'
#' fusion %>%
#'   filter(nv.vv == "VV") %>%
#'   gg_pt(time, taus = c(-0.25, -0.5, -1, 0),
#'         xlabel = "Cuantiles normales", ylabel = "Valores transformados",
#'         nrow = 3, color = "red")
#'
#' # With groups
#' gg_pt(fusion, time, nv.vv, taus = c(-0.5, -0.25, 0, 0.25, 0.5))
#'
gg_pt <- function(df, vble, group = NULL,
taus = c(-1, -.5, -.25, 0, .25, .5, 1),
xlabel = "Normal quantiles",
ylabel = paste("Transformed", quo_text(vble)),
nrow = 2,...) {
browser()
# NSE y controles
if (!is.data.frame(df)) stop("The object provided in the argument df is not a data.frame")
vble <- enquo(vble)
group <- enquo(group)
if (!is.numeric(eval_tidy(vble, df)))
stop(paste(quo_text(vble), "provided for the vble argument is not a numeric variable"))
if (!quo_is_null(group) && !is.character(eval_tidy(group, df)) && !is.factor(eval_tidy(group, df)))
stop(paste(quo_text(group), "provided for the group argument is neither a character nor a factor variable"))
if (!is.numeric(taus)) stop("taus must be a numeric vector")
if (!is.numeric(nrow)) stop("nrow must be a number")
if (length(nrow) > 2 || nrow < 1) stop("Argument nrow must be a numeric value of length one, greater or equal to 1")
# Transformar valores
datos_pot <-
sapply(taus, transf_pot, x = pull(df, !!vble)) %>%
as_tibble(.name_repair = ~ vctrs::vec_as_names(..., repair = "unique", quiet = TRUE)) %>%
setNames(taus)
if (quo_is_null(group)) {
datos_pot <- tidyr::pivot_longer(datos_pot, cols = dplyr::everything(), names_to = "tau", values_to = "y")
} else {
datos_pot <-
datos_pot %>%
mutate(groups = pull(df, !!group)) %>%
tidyr::pivot_longer(cols = -starts_with("groups"), names_to = "tau", values_to = "y")
}
# Graficar
g <- ggplot(datos_pot, aes(sample = .data$y)) +
stat_qq(...) +
stat_qq_line() +
xlab(xlabel) + ylab(ylabel)
if (quo_is_null(group)) {
g <- g + facet_wrap(~ tau, scales = "free_y", nrow = nrow)
} else {
g <- g + facet_wrap(groups ~ tau, scales = "free_y", nrow = 2)
}
return(g)
}
#'
#' fusion %>%
#'   filter(nv.vv == "VV") %>%
#'   gg_pt(time, taus = c(-0.25, -0.5, -1, 0),
#'         xlabel = "Cuantiles normales", ylabel = "Valores transformados",
#'         nrow = 3, color = "red")
#'
#' # With groups
#' gg_pt(fusion, time, nv.vv, taus = c(-0.5, -0.25, 0, 0.25, 0.5))
#'
gg_pt <- function(df, vble, group = NULL,
taus = c(-1, -.5, -.25, 0, .25, .5, 1),
xlabel = "Normal quantiles",
ylabel = paste("Transformed", quo_text(vble)),
nrow = 2,...) {
browser()
# NSE y controles
if (!is.data.frame(df)) stop("The object provided in the argument df is not a data.frame")
vble <- enquo(vble)
group <- enquo(group)
if (!is.numeric(eval_tidy(vble, df)))
stop(paste(quo_text(vble), "provided for the vble argument is not a numeric variable"))
if (!quo_is_null(group) && !is.character(eval_tidy(group, df)) && !is.factor(eval_tidy(group, df)))
stop(paste(quo_text(group), "provided for the group argument is neither a character nor a factor variable"))
if (!is.numeric(taus)) stop("taus must be a numeric vector")
if (!is.numeric(nrow)) stop("nrow must be a number")
if (length(nrow) > 2 || nrow < 1) stop("Argument nrow must be a numeric value of length one, greater or equal to 1")
# Transformar valores
datos_pot <-
sapply(taus, transf_pot, x = pull(df, !!vble)) %>%
as_tibble(.name_repair = ~ vctrs::vec_as_names(..., repair = "unique", quiet = TRUE)) %>%
setNames(taus)
if (quo_is_null(group)) {
datos_pot <- tidyr::pivot_longer(datos_pot, cols = dplyr::everything(), names_to = "tau", values_to = "y")
} else {
datos_pot <-
datos_pot %>%
mutate(groups = pull(df, !!group)) %>%
tidyr::pivot_longer(cols = -starts_with("groups"), names_to = "tau", values_to = "y")
}
# Graficar
g <- ggplot(datos_pot, aes(sample = .data$y)) +
stat_qq(...) +
stat_qq_line() +
xlab(xlabel) + ylab(ylabel)
if (quo_is_null(group)) {
g <- g + facet_wrap(~ tau, scales = "free_y", nrow = nrow)
} else {
g <- g + facet_wrap(groups ~ tau, scales = "free_y", nrow = 2)
}
return(g)
}
gg_pt(fusion, time, nv.vv, taus = c(-0.5, -0.25, 0, 0.25, 0.5))
library(rlang)
gg_pt(fusion, time, nv.vv, taus = c(-0.5, -0.25, 0, 0.25, 0.5))
sapply(taus, transf_pot, x = pull(df, !!vble))
#' The trasf_pot function
#'
#' Helper function for gg_pt
#'
#' @param x numeric vector to be transformed
#' @param tau powers
#'
#' @return vector of transformed values
#'
#' @keywords internal
transf_pot <- function(x, tau = 0) {
if(tau == 0) {
x = log(x)
} else {
x = x^tau
}
return(x)
}
datos_pot <-
sapply(taus, transf_pot, x = pull(df, !!vble))
library(tidyverse)
datos_pot <-
sapply(taus, transf_pot, x = pull(df, !!vble))
View(datos_pot)
pull(df, !!vble)
47.2 ^ -0.5
datos_pot <-
sapply(taus, transf_pot, x = pull(df, !!vble)) %>%
as_tibble(.name_repair = ~ vctrs::vec_as_names(..., repair = "unique", quiet = TRUE))
datos_pot <-
sapply(taus, transf_pot, x = pull(df, !!vble)) %>%
as_tibble(.name_repair = ~ vctrs::vec_as_names(..., repair = "unique", quiet = TRUE)) %>%
setNames(taus)
View(datos_pot)
if (quo_is_null(group)) {
datos_pot <- tidyr::pivot_longer(datos_pot, cols = dplyr::everything(), names_to = "tau", values_to = "y")
} else {
datos_pot <-
datos_pot %>%
mutate(groups = pull(df, !!group)) %>%
tidyr::pivot_longer(cols = -starts_with("groups"), names_to = "tau", values_to = "y")
}
View(datos_pot)
View(datos_pot)
quo_is_null(group)
datos_pot <-
datos_pot %>%
mutate(groups = pull(df, !!group)) %>%
tidyr::pivot_longer(cols = -starts_with("groups"), names_to = "tau", values_to = "y")
View(datos_pot)
datos_pot$tau <- as.numeric(datos_pot$tau)
View(datos_pot)
g <- ggplot(datos_pot, aes(sample = .data$y)) +
stat_qq(...) +
stat_qq_line() +
xlab(xlabel) + ylab(ylabel)
g <- g + facet_wrap(groups ~ tau, scales = "free_y", nrow = 2)
g
#'
#' fusion %>%
#'   filter(nv.vv == "VV") %>%
#'   gg_pt(time, taus = c(-0.25, -0.5, -1, 0),
#'         xlabel = "Cuantiles normales", ylabel = "Valores transformados",
#'         nrow = 3, color = "red")
#'
#' # With groups
#' gg_pt(fusion, time, nv.vv, taus = c(-0.5, -0.25, 0, 0.25, 0.5))
#'
gg_pt <- function(df, vble, group = NULL,
taus = c(-1, -.5, -.25, 0, .25, .5, 1),
xlabel = "Normal quantiles",
ylabel = paste("Transformed", quo_text(vble)),
nrow = 2,...) {
# NSE y controles
if (!is.data.frame(df)) stop("The object provided in the argument df is not a data.frame")
vble <- enquo(vble)
group <- enquo(group)
if (!is.numeric(eval_tidy(vble, df)))
stop(paste(quo_text(vble), "provided for the vble argument is not a numeric variable"))
if (!quo_is_null(group) && !is.character(eval_tidy(group, df)) && !is.factor(eval_tidy(group, df)))
stop(paste(quo_text(group), "provided for the group argument is neither a character nor a factor variable"))
if (!is.numeric(taus)) stop("taus must be a numeric vector")
if (!is.numeric(nrow)) stop("nrow must be a number")
if (length(nrow) > 2 || nrow < 1) stop("Argument nrow must be a numeric value of length one, greater or equal to 1")
# Transformar valores
datos_pot <-
sapply(taus, transf_pot, x = pull(df, !!vble)) %>%
as_tibble(.name_repair = ~ vctrs::vec_as_names(..., repair = "unique", quiet = TRUE)) %>%
setNames(taus)
if (quo_is_null(group)) {
datos_pot <- tidyr::pivot_longer(datos_pot, cols = dplyr::everything(), names_to = "tau", values_to = "y")
} else {
datos_pot <-
datos_pot %>%
mutate(groups = pull(df, !!group)) %>%
tidyr::pivot_longer(cols = -starts_with("groups"), names_to = "tau", values_to = "y")
}
datos_pot$tau <- as.numeric(datos_pot$tau)
# Graficar
g <- ggplot(datos_pot, aes(sample = .data$y)) +
stat_qq(...) +
stat_qq_line() +
xlab(xlabel) + ylab(ylabel)
if (quo_is_null(group)) {
g <- g + facet_wrap(~ tau, scales = "free_y", nrow = nrow)
} else {
g <- g + facet_wrap(groups ~ tau, scales = "free_y", nrow = 2)
}
return(g)
}
gg_pt(fusion, time, nv.vv)
#' The trasf_pot function
#'
#' Helper function for gg_pt
#'
#' @param x numeric vector to be transformed
#' @param tau powers
#'
#' @return vector of transformed values
#'
#' @keywords internal
transf_pot <- function(x, tau = 0) {
if(tau == 0) {
x = log(x)
} else {
x = x^tau
}
return(x)
}
gg_pt(fusion, time, nv.vv)
?unit
ggplot::unit()
ggplot2::unit()
gg_sl(fusion, time, nv.vv, jitterwidth = 0.4, linecol = "blue",
ylabel = "hola", jitteralpha = 1) +
scale_color_discrete("Grupo") +
xlim(1, 9)
xlim(2, 8)
gg_sl(fusion, time, nv.vv, jitterwidth = 0.4, linecol = "blue",
ylabel = "hola", jitteralpha = 1) +
scale_color_discrete("Grupo") +
xlim(2, 8)
gg_tmd_paired(ozone, stamford, yonkers)
# Quedarse con solo dos grupos
futbol2 <-
futbol %>%
filter(longp %in% c("< 0.81 m", "0.81 a 0.90 m"))
# Gráfico de cuantiles para dos grupos
gg_quantiles(futbol2, dist, longp)
theme_set(theme_bw() + theme(panel.spacing = unit(0, "lines")))
# Más de dos grupos
gg_quantiles(futbol, dist, longp, size = 0.4, color = "red", shape = 3) +
labs(title = "Gráficos QQ de a pares", x = "Distancia (m)", y = "Distancia (m)")
futbol <-
futbol %>%
group_by(longp) %>%
mutate(ajuste = mean(dist), res = dist - ajuste)
gg_quantiles(futbol, res, longp, combined = TRUE)
gg_tmd_paired(ozone, stamford, yonkers)
gg_rf(futbol, dist, ajuste, res, ylabel = "Distancia (m)")
# Agregando las observaciones centradas por la media general
gg_rf(futbol, dist, ajuste, res, cen_obs = TRUE, ylabel = "Distancia (m)")
gg_sl(futbol2, dist, longp, xlabel = "Mediana de distancia jittered (m)")
gg_sl(futbol2, dist, longp, xlabel = "Mediana de distancia jittered (m)") +
xlim(45, 70)
gg_sl(futbol2, dist, longp, xlabel = "Mediana de distancia jittered (m)",
jitterwidth = 2) +
xlim(45, 75)
gg_sl(futbol2, dist, longp, xlabel = "Mediana de distancia jittered (m)",
jitterwidth = 2) +
xlim(45, 65)
gg_sl(futbol2, dist, longp, xlabel = "Mediana de distancia jittered (m)",
jitterwidth = 1.5) +
xlim(45, 68)
gg_pt(futbol2, dist, taus = c(-1, -0.5, 0, 0.5))
# Para cada grupo por separado
gg_pt(futbol2, dist, longp, taus = c(-1, -0.5, 0, 0.5))
# Slicing con los valores únicos de la variable de faceting
gg_coplot(galaxy, x = posicion.radial, y = velocidad,
faceting = angulo, number_bins = 7, loess_span = .5, loess_degree = 2,
facet_labeller = function(x) paste0("Ángulo = ", x, "º"),
facet_label = "Ángulo (grado)", facets_nrow = 2, intervals_height = 0.2,
xlabel = "Posición radial (arcsec)", ylabel = "Velocidad (km/s)")
equal_count(iris, Sepal.Length, 15, 0.3)
pkgdown:::build_site_external()
pkgdown:::build_site_external()
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
pkgdown:::build_site_external()
library(ggcleveland)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
pkgdown:::build_site_external()
devtools::check_win_devel()
devtools::check_win_oldrelease()
devtools::check_win_release()
devtools::release()
devtools::release()
devtools::release(check = F)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::release(check = FALSE)
citation(ggplot2)
citation("ggplot2")
